<div class="modal fade" id="login-modal" tabindex="-1" role="dialog" aria-labelledby="login-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="login-modal-label">Log in</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Add an element to display error messages -->
        <div id="login-error" class="alert alert-danger d-none"></div>
  
        <%= form_for(resource, as: resource_name, url: session_path(resource_name), format: :json, html: { id: 'login-form' }) do |f| %>
          <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
          <div class="field">
            <%= f.label :email %><br />
            <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
          </div>

          <div class="field">
            <%= f.label :password %><br />
            <%= f.password_field :password, autocomplete: "current-password" %>
          </div>

          <% if devise_mapping.rememberable? %>
            <div class="field">
              <%= f.check_box :remember_me %>
              <%= f.label :remember_me %>
            </div>
          <% end %>

          <div class="actions">
            <%= f.submit "Log in", class: "btn btn-primary" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const loginForm = document.getElementById("login-form");
    const errorMessage = document.getElementById("login-error");

    loginForm.addEventListener("submit", (event) => {
      event.preventDefault();

      const formData = new FormData(loginForm);

      fetch(loginForm.action, {
        method: 'POST',
        body: formData,
        credentials: 'same-origin',
        headers: {
          'Accept': 'application/json',
          'X-CSRF-Token': formData.get('authenticity_token')
        }
      })
      .then(response => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error('Invalid email or password');
        }
      })
      .then(data => {
        if (data.success) {
          location.reload();
        } else {
          errorMessage.innerHTML = "Invalid email or password";
          errorMessage.classList.remove("d-none");
        }
      })
      .catch(() => {
        errorMessage.innerHTML = "Invalid email or password";
        errorMessage.classList.remove("d-none");
      });
    });
  });
</script>
